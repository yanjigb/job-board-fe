/* eslint-disable @typescript-eslint/no-unused-vars */

'use client'

import React, { memo, useCallback, useMemo, useState } from 'react'
import isEqual from 'react-fast-compare'
import { useForm } from 'react-hook-form'
import QRCode from 'react-qr-code'
import { ArrowLeft, ArrowRight } from 'lucide-react'
import Image from 'next/image'
import Link from 'next/link'

import { AppCopy } from '@/components/common/app-copy'
import { AppInputNumber } from '@/components/common/app-input'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import { Tabs, TabsContent, TabsListRoot, TabsTriggerRoot } from '@/components/ui/tabs'

import { useDictionary } from '@/providers/dictionary-provider'
import { cn } from '@/utils/cn'

import { getQRScanStep } from './constants'

function Step1() {
  const { dictionary } = useDictionary()
  return (
    <TabsContent value="1" className="flex items-start gap-3">
      <div className="aspect-[173/158] max-w-[10.8125rem] bg-white px-3 py-2">
        <QRCode size={256} className="h-auto w-full" value="value" viewBox="0 0 256 256" />
      </div>

      <article className="w-full">
        <div className="max-w-[15.4456rem]">
          <p className="text-h5/medium">{dictionary['Scan to download']}</p>
          <p className="mb-5 mt-2 text-text-primary">
            <span className="block">{dictionary['IOS & Android']}</span>
            <span>{dictionary[`Use your phone's camera or browser to scan`]}</span>
          </p>

          <div className="flex gap-3">
            <Link href="##">
              <Image
                src="/images/dashboard/google-play.svg"
                width={117.56}
                height={38}
                alt="google-play"
              />
            </Link>
            <Link href="##">
              <Image
                src="/images/dashboard/apple-store.svg"
                width={117.56}
                height={38}
                alt="apple-store"
              />
            </Link>
          </div>
        </div>
      </article>
    </TabsContent>
  )
}

function Step2() {
  const { dictionary } = useDictionary()
  return (
    <TabsContent value="2" className="flex items-start gap-3">
      <div className="aspect-[173/158] max-w-[10.8125rem] bg-white px-3 py-2">
        <QRCode size={256} className="h-auto w-full" value="value" viewBox="0 0 256 256" />
      </div>

      <article className="w-full">
        <div className="max-w-[26.6875rem] space-y-5">
          <div className="space-y-2">
            <p className="text-body/large/medium font-normal">{dictionary['Scan this QR code']}</p>

            <p className="text-text-primary">
              {
                dictionary[
                  'If you are unable to scan the QR code, please enter the setup key in step 3 manually into the app.'
                ]
              }
            </p>
          </div>

          <div className="space-y-2">
            <p className="text-body/large/medium font-normal">
              {dictionary['Or save this setup key']}
            </p>

            <AppCopy className="gap-2 text-text-primary [&_.icon]:size-6 [&_.icon]:text-blueLight">
              JJJCQZCJGN5UA5Z7
            </AppCopy>
          </div>
        </div>
      </article>
    </TabsContent>
  )
}

function Step3() {
  const { dictionary } = useDictionary()
  const form = useForm()
  const onSubmit = form.handleSubmit((values) => {
    console.log('ðŸš€ ~ onSubmit ~ values:', values)
  })
  return (
    <TabsContent value="3" className="flex w-full max-w-[37rem] items-center gap-3">
      <Form {...form}>
        <form onSubmit={onSubmit} className="w-full space-y-8">
          <FormField
            control={form.control}
            name="otp"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{dictionary['Authenticator App code']}</FormLabel>
                <FormControl>
                  <AppInputNumber {...field} placeholder={dictionary['Enter Authenticator Code']} />
                </FormControl>
                <FormMessage />
                <FormDescription>
                  {dictionary['Enter the 6-digit code generated by Google Authenticator']}
                </FormDescription>
              </FormItem>
            )}
          />

          <Button className="min-w-[12.5rem]">{dictionary.Submit}</Button>
        </form>
      </Form>
    </TabsContent>
  )
}

function Complete() {
  const { dictionary } = useDictionary()
  return (
    <div className="flex items-center gap-4 md:gap-8">
      <Image
        src="/images/kyc/verify-success.svg"
        width={218.67}
        height={200}
        alt="success"
        className="block min-w-[7.5rem]"
      />

      <article className="max-w-[37rem] space-y-1">
        <h4 className="text-body/large/medium font-normal text-success">
          {dictionary['Successfully enabled Google Authenticator']}
        </h4>

        <p className="text-text-primary">
          {
            dictionary[
              'Google Authenticator adds extra security with time-sensitive codes You can disable it anytime for flexibility.'
            ]
          }
        </p>

        <Button className="!mt-5 min-w-[12.5rem]">{dictionary.Submit}</Button>
      </article>
    </div>
  )
}

function Steps() {
  const { dictionary } = useDictionary()
  const [step, setStep] = useState('1')

  const steps = useMemo(() => getQRScanStep(dictionary), [dictionary])

  const onPreviousStep = useCallback(() => setStep((prevStep) => (+prevStep - 1).toString()), [])

  const onNextStep = useCallback(() => setStep((prevStep) => (+prevStep + 1).toString()), [])

  return (
    <div className="pt-12">
      <Card className="space-y-3">
        <h3>{dictionary['Enable Google Authenticator']}</h3>

        <div>
          <Tabs
            className="flex flex-col items-start justify-start gap-[2.125rem] xl:flex-row"
            value={step}
            onValueChange={setStep}
          >
            <TabsListRoot>
              <div className="flex max-w-[400px] flex-col">
                {steps.map((item, index) => {
                  const value = (index + 1).toString()
                  return (
                    <TabsTriggerRoot
                      asChild
                      value={value}
                      key={item}
                      className={cn(
                        'relative cursor-pointer pb-4 pl-6 text-text-primary',
                        `after:absolute after:left-0 after:top-2 after:size-2 after:rounded-full after:bg-stroke after:content-['']`,
                        `before:absolute before:bottom-0 before:left-[0.2188rem] before:h-[calc(100%-1.5rem)] before:w-px before:bg-stroke before:content-['']`,
                        'last:before:bg-transparent',
                        step === value && 'text-secondary before:bg-secondary after:bg-secondary',
                      )}
                    >
                      <span>
                        {value}. {item}
                      </span>
                    </TabsTriggerRoot>
                  )
                })}
              </div>

              <div className="mt-2 inline-flex gap-4 self-start rounded-md bg-dark-2">
                <Button
                  variant="bg"
                  className="h-auto min-w-[5.625rem] gap-1 bg-dark-2 p-0 px-[0.5625rem] py-[0.3125rem] !text-body/small/regular font-light text-text-placeholder disabled:bg-dark-2 disabled:text-text-placeholder/50"
                  disabled={step === '1'}
                  onClick={onPreviousStep}
                >
                  <ArrowLeft size={12} />
                  {dictionary.Previous}
                </Button>

                <Button
                  variant="secondary"
                  className="h-auto min-w-[5.625rem] gap-1 px-[0.5625rem] py-[0.3125rem] !text-body/small/regular font-light"
                  disabled={step === steps.length.toString()}
                  onClick={onNextStep}
                >
                  {dictionary.Next}
                  <ArrowRight size={12} />
                </Button>
              </div>
            </TabsListRoot>

            <div className="w-full max-w-[38.25rem] flex-1 lg:w-auto">
              <Step1 />
              <Step2 />
              <Step3 />
            </div>
          </Tabs>

          <div />
        </div>
      </Card>
    </div>
  )
}

export default memo(Steps, isEqual)
